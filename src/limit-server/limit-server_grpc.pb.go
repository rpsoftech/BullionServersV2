// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/limit-server.proto

package limit_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LimitServer_PlaceLimit_FullMethodName       = "/proto.LimitServer/PlaceLimit"
	LimitServer_PlaceLimitStream_FullMethodName = "/proto.LimitServer/PlaceLimitStream"
)

// LimitServerClient is the client API for LimitServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LimitServerClient interface {
	PlaceLimit(ctx context.Context, in *UplinkPlaceLimitRequest, opts ...grpc.CallOption) (*UplinkPlaceLimitResponse, error)
	PlaceLimitStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UplinkPlaceLimitRequest, UplinkPlaceLimitResponse], error)
}

type limitServerClient struct {
	cc grpc.ClientConnInterface
}

func NewLimitServerClient(cc grpc.ClientConnInterface) LimitServerClient {
	return &limitServerClient{cc}
}

func (c *limitServerClient) PlaceLimit(ctx context.Context, in *UplinkPlaceLimitRequest, opts ...grpc.CallOption) (*UplinkPlaceLimitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UplinkPlaceLimitResponse)
	err := c.cc.Invoke(ctx, LimitServer_PlaceLimit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *limitServerClient) PlaceLimitStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UplinkPlaceLimitRequest, UplinkPlaceLimitResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LimitServer_ServiceDesc.Streams[0], LimitServer_PlaceLimitStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UplinkPlaceLimitRequest, UplinkPlaceLimitResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LimitServer_PlaceLimitStreamClient = grpc.BidiStreamingClient[UplinkPlaceLimitRequest, UplinkPlaceLimitResponse]

// LimitServerServer is the server API for LimitServer service.
// All implementations must embed UnimplementedLimitServerServer
// for forward compatibility.
type LimitServerServer interface {
	PlaceLimit(context.Context, *UplinkPlaceLimitRequest) (*UplinkPlaceLimitResponse, error)
	PlaceLimitStream(grpc.BidiStreamingServer[UplinkPlaceLimitRequest, UplinkPlaceLimitResponse]) error
	mustEmbedUnimplementedLimitServerServer()
}

// UnimplementedLimitServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLimitServerServer struct{}

func (UnimplementedLimitServerServer) PlaceLimit(context.Context, *UplinkPlaceLimitRequest) (*UplinkPlaceLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceLimit not implemented")
}
func (UnimplementedLimitServerServer) PlaceLimitStream(grpc.BidiStreamingServer[UplinkPlaceLimitRequest, UplinkPlaceLimitResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PlaceLimitStream not implemented")
}
func (UnimplementedLimitServerServer) mustEmbedUnimplementedLimitServerServer() {}
func (UnimplementedLimitServerServer) testEmbeddedByValue()                     {}

// UnsafeLimitServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LimitServerServer will
// result in compilation errors.
type UnsafeLimitServerServer interface {
	mustEmbedUnimplementedLimitServerServer()
}

func RegisterLimitServerServer(s grpc.ServiceRegistrar, srv LimitServerServer) {
	// If the following call pancis, it indicates UnimplementedLimitServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LimitServer_ServiceDesc, srv)
}

func _LimitServer_PlaceLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UplinkPlaceLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LimitServerServer).PlaceLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LimitServer_PlaceLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LimitServerServer).PlaceLimit(ctx, req.(*UplinkPlaceLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LimitServer_PlaceLimitStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LimitServerServer).PlaceLimitStream(&grpc.GenericServerStream[UplinkPlaceLimitRequest, UplinkPlaceLimitResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LimitServer_PlaceLimitStreamServer = grpc.BidiStreamingServer[UplinkPlaceLimitRequest, UplinkPlaceLimitResponse]

// LimitServer_ServiceDesc is the grpc.ServiceDesc for LimitServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LimitServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.LimitServer",
	HandlerType: (*LimitServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceLimit",
			Handler:    _LimitServer_PlaceLimit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PlaceLimitStream",
			Handler:       _LimitServer_PlaceLimitStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/limit-server.proto",
}
